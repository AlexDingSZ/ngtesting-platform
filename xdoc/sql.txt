DROP PROCEDURE IF EXISTS `testspace`.`move_node`; 
CREATE DEFINER = `root`@`localhost` PROCEDURE 
    `testspace`.`move_node`(node_table varchar(100), node_id BIGINT, parent_id BIGINT)

BEGIN
DECLARE sql_str varchar(5000);

/*获取老的原路径*/
set sql_str = '';
set sql_str = concat(sql_str, '  SELECT node.path into @old_path FROM  ', node_table, ' node');
set sql_str = concat(sql_str, '     WHERE node.id = ', node_id);

set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;  
EXECUTE stmt;

set @old_path = concat(@old_path, node_id, '/');

/*获取新的父路径*/
set sql_str = '';
set sql_str = concat(sql_str, '  SELECT node.path into @node_path FROM  ', node_table, ' node');
set sql_str = concat(sql_str, '     WHERE node.id = ', parent_id);

set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;  
EXECUTE stmt;

set @node_path = concat(@node_path, parent_id, '/');
set @child_path = concat(@node_path, node_id, '/');

/*更新自己*/
set sql_str = '';
set sql_str = concat(sql_str, '  UPDATE ', node_table , ' SET parent_id = ' , parent_id, ',');
set sql_str = concat(sql_str, '             path = ', '''' , @node_path, '''');
set sql_str = concat(sql_str, '  WHERE id = ', node_id);

set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;
EXECUTE stmt;

/*更新后代*/
set sql_str = '';
set sql_str = concat(sql_str, '  UPDATE ', node_table);
set sql_str = concat(sql_str, '   SET path = REPLACE(path, ', '''', @old_path , '''', ',', '''' , @child_path, '''', ')');
set sql_str = concat(sql_str, '  WHERE path LIKE ', '''', @old_path, '%''');

/*查询*/
set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;
EXECUTE stmt;

set sql_str = '';
set sql_str = concat(sql_str, '  SELECT * FROM  ', node_table, ' node');
set sql_str = concat(sql_str, '     WHERE node.id = ', node_id);

set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;
EXECUTE stmt;  
DEALLOCATE PREPARE stmt;

END

======
DROP PROCEDURE IF EXISTS `testspace`.`query_project`; 
CREATE DEFINER = `root`@`localhost` PROCEDURE `testspace`.`query_project`(company_id BIGINT, is_active BIT)

BEGIN
DECLARE root_id BIGINT;
DECLARE sql_str varchar(5000); 

SELECT project.id INTO root_id  
    FROM  tst_project project  
    WHERE  project.name = 'ROOT' AND project.company_id = company_id;

set sql_str =                  ' SELECT node.id, node.name, node.descr, node.is_active, node.lft, node.rgt, node.company_id,';
set sql_str = concat( sql_str, '   node.level as l2, node.create_time, node.update_time, node.deleted, node.disabled, node.version,');
set sql_str = concat( sql_str, '   (COUNT(parent.id) - (sub_tree.depth + 1)) AS level');
set sql_str = concat( sql_str, ' FROM tst_project AS node,');
set sql_str = concat( sql_str, '   tst_project AS parent,');
set sql_str = concat( sql_str, '   tst_project AS sub_parent,');
set sql_str = concat( sql_str, '   ( ');
set sql_str = concat( sql_str, '    SELECT node.id, (COUNT(parent.id) - 1) AS depth');
set sql_str = concat( sql_str, '    FROM tst_project AS node,');
set sql_str = concat( sql_str, '      tst_project AS parent');
set sql_str = concat( sql_str, '    WHERE node.lft BETWEEN parent.lft AND parent.rgt');
set sql_str = concat( sql_str, '      AND node.id = ', root_id);
set sql_str = concat( sql_str, '    GROUP BY node.id');
set sql_str = concat( sql_str, '    ORDER BY node.lft');
set sql_str = concat( sql_str, '  ) AS sub_tree');
set sql_str = concat( sql_str, ' WHERE node.lft BETWEEN parent.lft AND parent.rgt');
set sql_str = concat( sql_str, '    AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt');
set sql_str = concat( sql_str, '    AND sub_parent.id = sub_tree.id');

if (is_active) then  
    set sql_str = concat( sql_str, '  AND node.is_active');
end if;

set sql_str = concat( sql_str, ' GROUP BY node.name');
set sql_str = concat( sql_str, ' ORDER BY node.lft');

set @sql_str = sql_str;
PREPARE stmt FROM @sql_str;  
EXECUTE stmt;  
DEALLOCATE PREPARE stmt;

END

======
BEGIN
    DECLARE sTemp VARCHAR(4000);
    DECLARE sTempChd VARCHAR(4000);

    SET sTemp = '$';
    SET sTempChd = cast(projectId as char);

    WHILE sTempChd is not NULL DO
        SET sTemp = CONCAT(sTemp,',',sTempChd);
        SELECT group_concat(id) INTO sTempChd FROM tst_project where FIND_IN_SET(parent_id,sTempChd)>0 AND company_id = companyId;
    END WHILE;
    return sTemp;
END